import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Textarea } from "@/components/ui/textarea";

export default function CampaignTool() {
  const [url, setUrl] = useState("");
  const [CampaignHistory, setCampaignHistory] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [outputFile, setOutputFile] = useState(null);
  const [copies, setCopies] = useState(
    Array.from({ length: 4 }, (_, i) => ({
      id: i,
      title: `Título ejemplo ${i + 1}`,
      body: `Texto descriptivo para el anuncio número ${i + 1}.`,
      saved: false,
    }))
  );

  const handleGenerate = async () => {
    if (!url) return;
    setIsLoading(true);

    // Mock request for now
    setTimeout(() => {
      const newEntry = {
        url,
        timestamp: new Date().toLocaleString(),
        keywordsFound: Math.floor(Math.random() * 50 + 50),
      };
      setCampaignHistory([newEntry, ...CampaignHistory]);
      const domain = new URL(url).hostname.replace(/^www\./, "").replace(/\./g, "_");
      setOutputFile({ name: `campaña_${domain}_${Date.now()}.csv` });
      setIsLoading(false);
      setUrl("");
    }, 1500);
  };

  const handleCopyChange = (id, field, value) => {
    setCopies((prev) =>
      prev.map((copy) =>
        copy.id === id ? { ...copy, [field]: value, saved: false } : copy
      )
    );
  };

  const handleSaveCopy = (id) => {
    setCopies((prev) =>
      prev.map((copy) => (copy.id === id ? { ...copy, saved: true } : copy))
    );
  };

  return (
    <div className="p-4 max-w-4xl mx-auto space-y-6">
      <h1 className="text-2xl font-bold">Generador de Campañas</h1>

      <Card>
        <CardContent className="p-4 space-y-4">
          <div className="space-y-2">
            <label className="font-medium">URL del sitio web</label>
            <Input
              type="text"
              placeholder="https://ejemplo.com"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
            />
          </div>
          <Button onClick={handleGenerate} disabled={isLoading || !url}>
            {isLoading ? "Procesando..." : "Generar campaña"}
          </Button>
        </CardContent>
      </Card>

      {CampaignHistory.length > 0 && (
        <Card>
          <CardContent className="p-4">
            <h2 className="text-xl font-semibold mb-2">Historial de Consultas</h2>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>URL</TableHead>
                  <TableHead>Fecha</TableHead>
                  <TableHead>Palabras clave encontradas</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {CampaignHistory.map((q, i) => (
                  <TableRow key={i}>
                    <TableCell>{q.url}</TableCell>
                    <TableCell>{q.timestamp}</TableCell>
                    <TableCell>{q.keywordsFound}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      )}

      {copies.length > 0 && (
        <Card>
          <CardContent className="p-4 space-y-4">
            <h2 className="text-xl font-semibold">Copys Generados</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {copies.map((copy) => (
                <Card key={copy.id} className="border">
                  <CardContent className="p-4 space-y-2">
                    <Input
                      value={copy.title}
                      onChange={(e) => handleCopyChange(copy.id, "title", e.target.value)}
                      placeholder="Título del anuncio"
                    />
                    <Textarea
                      value={copy.body}
                      onChange={(e) => handleCopyChange(copy.id, "body", e.target.value)}
                      placeholder="Descripción del anuncio"
                    />
                    <Button
                      onClick={() => handleSaveCopy(copy.id)}
                      variant={copy.saved ? "outline" : "default"}
                    >
                      {copy.saved ? "Guardado" : "Guardar"}
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {outputFile && (
        <Card>
          <CardContent className="p-4 flex flex-col gap-2">
            <h2 className="text-xl font-semibold">Archivo Generado</h2>
            <a
              href="#"
              onClick={(e) => e.preventDefault()}
              className="text-blue-600 hover:underline"
            >
              {outputFile.name}
            </a>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
